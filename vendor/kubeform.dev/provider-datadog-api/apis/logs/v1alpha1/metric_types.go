/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Metric struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricSpec   `json:"spec,omitempty"`
	Status            MetricStatus `json:"status,omitempty"`
}

type MetricSpecCompute struct {
	// The type of aggregation to use. This field can't be updated after creation.
	AggregationType *string `json:"aggregationType" tf:"aggregation_type"`
	// The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type MetricSpecFilter struct {
	// The search query - following the log search syntax.
	Query *string `json:"query" tf:"query"`
}

type MetricSpecGroupBy struct {
	// The path to the value the log-based metric will be aggregated over.
	Path *string `json:"path" tf:"path"`
	// Name of the tag that gets created.
	TagName *string `json:"tagName" tf:"tag_name"`
}

type MetricSpec struct {
	State *MetricSpecResource `json:"state,omitempty" tf:"-"`

	Resource MetricSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type MetricSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The compute rule to compute the log-based metric. This field can't be updated after creation.
	Compute *MetricSpecCompute `json:"compute" tf:"compute"`
	// The log-based metric filter. Logs matching this filter will be aggregated in this metric.
	Filter *MetricSpecFilter `json:"filter" tf:"filter"`
	// The rules for the group by.
	// +optional
	GroupBy []MetricSpecGroupBy `json:"groupBy,omitempty" tf:"group_by"`
	// The name of the log-based metric. This field can't be updated after creation.
	Name *string `json:"name" tf:"name"`
}

type MetricStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MetricList is a list of Metrics
type MetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Metric CRD objects
	Items []Metric `json:"items,omitempty"`
}
