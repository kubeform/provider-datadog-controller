/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CustomPipeline struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomPipelineSpec   `json:"spec,omitempty"`
	Status            CustomPipelineStatus `json:"status,omitempty"`
}

type CustomPipelineSpecFilter struct {
	// Filter criteria of the category.
	Query *string `json:"query" tf:"query"`
}

type CustomPipelineSpecProcessorArithmeticProcessor struct {
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression" tf:"expression"`
	// Boolean value to enable your pipeline.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing"`
	// Your pipeline name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorAttributeRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Override the target element if already set.
	// +optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict"`
	// Remove or preserve the remapped source element.
	// +optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source"`
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType" tf:"source_type"`
	// List of source attributes or tags.
	Sources []string `json:"sources" tf:"sources"`
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target" tf:"target"`
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format"`
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType" tf:"target_type"`
}

type CustomPipelineSpecProcessorCategoryProcessorCategoryFilter struct {
	// Filter criteria of the category.
	Query *string `json:"query" tf:"query"`
}

type CustomPipelineSpecProcessorCategoryProcessorCategory struct {
	Filter *CustomPipelineSpecProcessorCategoryProcessorCategoryFilter `json:"filter" tf:"filter"`
	Name   *string                                                     `json:"name" tf:"name"`
}

type CustomPipelineSpecProcessorCategoryProcessor struct {
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CustomPipelineSpecProcessorCategoryProcessorCategory `json:"category" tf:"category"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the category
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorDateRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorGeoIPParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorGrokParserGrok struct {
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules" tf:"match_rules"`
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules" tf:"support_rules"`
}

type CustomPipelineSpecProcessorGrokParser struct {
	Grok *CustomPipelineSpecProcessorGrokParserGrok `json:"grok" tf:"grok"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +optional
	Samples []string `json:"samples,omitempty" tf:"samples"`
	// Name of the log attribute to parse.
	Source *string `json:"source" tf:"source"`
}

type CustomPipelineSpecProcessorLookupProcessor struct {
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// List of entries of the lookup table using `key,value` format.
	LookupTable []string `json:"lookupTable" tf:"lookup_table"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source" tf:"source"`
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorMessageRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineFilter struct {
	// Filter criteria of the category.
	Query *string `json:"query" tf:"query"`
}

type CustomPipelineSpecProcessorPipelineProcessorArithmeticProcessor struct {
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression" tf:"expression"`
	// Boolean value to enable your pipeline.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing"`
	// Your pipeline name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessorAttributeRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Override the target element if already set.
	// +optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict"`
	// Remove or preserve the remapped source element.
	// +optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source"`
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType" tf:"source_type"`
	// List of source attributes or tags.
	Sources []string `json:"sources" tf:"sources"`
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target" tf:"target"`
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format"`
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType" tf:"target_type"`
}

type CustomPipelineSpecProcessorPipelineProcessorCategoryProcessorCategoryFilter struct {
	// Filter criteria of the category.
	Query *string `json:"query" tf:"query"`
}

type CustomPipelineSpecProcessorPipelineProcessorCategoryProcessorCategory struct {
	Filter *CustomPipelineSpecProcessorPipelineProcessorCategoryProcessorCategoryFilter `json:"filter" tf:"filter"`
	Name   *string                                                                      `json:"name" tf:"name"`
}

type CustomPipelineSpecProcessorPipelineProcessorCategoryProcessor struct {
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CustomPipelineSpecProcessorPipelineProcessorCategoryProcessorCategory `json:"category" tf:"category"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the category
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessorDateRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineProcessorGeoIPParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessorGrokParserGrok struct {
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules" tf:"match_rules"`
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules" tf:"support_rules"`
}

type CustomPipelineSpecProcessorPipelineProcessorGrokParser struct {
	Grok *CustomPipelineSpecProcessorPipelineProcessorGrokParserGrok `json:"grok" tf:"grok"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +optional
	Samples []string `json:"samples,omitempty" tf:"samples"`
	// Name of the log attribute to parse.
	Source *string `json:"source" tf:"source"`
}

type CustomPipelineSpecProcessorPipelineProcessorLookupProcessor struct {
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup"`
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// List of entries of the lookup table using `key,value` format.
	LookupTable []string `json:"lookupTable" tf:"lookup_table"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source" tf:"source"`
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessorMessageRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineProcessorServiceRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineProcessorStatusRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineProcessorStringBuilderProcessor struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If it replaces all missing attributes of template by an empty string.
	// +optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing"`
	// The name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target" tf:"target"`
	// The formula with one or more attributes and raw text.
	Template *string `json:"template" tf:"template"`
}

type CustomPipelineSpecProcessorPipelineProcessorTraceIDRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorPipelineProcessorUrlParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Normalize the ending slashes or not.
	// +optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessorUserAgentParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If the source attribute is URL encoded or not.
	// +optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorPipelineProcessor struct {
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +optional
	ArithmeticProcessor *CustomPipelineSpecProcessorPipelineProcessorArithmeticProcessor `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor"`
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +optional
	AttributeRemapper *CustomPipelineSpecProcessorPipelineProcessorAttributeRemapper `json:"attributeRemapper,omitempty" tf:"attribute_remapper"`
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +optional
	CategoryProcessor *CustomPipelineSpecProcessorPipelineProcessorCategoryProcessor `json:"categoryProcessor,omitempty" tf:"category_processor"`
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +optional
	DateRemapper *CustomPipelineSpecProcessorPipelineProcessorDateRemapper `json:"dateRemapper,omitempty" tf:"date_remapper"`
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +optional
	GeoIPParser *CustomPipelineSpecProcessorPipelineProcessorGeoIPParser `json:"geoIPParser,omitempty" tf:"geo_ip_parser"`
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +optional
	GrokParser *CustomPipelineSpecProcessorPipelineProcessorGrokParser `json:"grokParser,omitempty" tf:"grok_parser"`
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +optional
	LookupProcessor *CustomPipelineSpecProcessorPipelineProcessorLookupProcessor `json:"lookupProcessor,omitempty" tf:"lookup_processor"`
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +optional
	MessageRemapper *CustomPipelineSpecProcessorPipelineProcessorMessageRemapper `json:"messageRemapper,omitempty" tf:"message_remapper"`
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +optional
	ServiceRemapper *CustomPipelineSpecProcessorPipelineProcessorServiceRemapper `json:"serviceRemapper,omitempty" tf:"service_remapper"`
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +optional
	StatusRemapper *CustomPipelineSpecProcessorPipelineProcessorStatusRemapper `json:"statusRemapper,omitempty" tf:"status_remapper"`
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +optional
	StringBuilderProcessor *CustomPipelineSpecProcessorPipelineProcessorStringBuilderProcessor `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor"`
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +optional
	TraceIDRemapper *CustomPipelineSpecProcessorPipelineProcessorTraceIDRemapper `json:"traceIDRemapper,omitempty" tf:"trace_id_remapper"`
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +optional
	UrlParser *CustomPipelineSpecProcessorPipelineProcessorUrlParser `json:"urlParser,omitempty" tf:"url_parser"`
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +optional
	UserAgentParser *CustomPipelineSpecProcessorPipelineProcessorUserAgentParser `json:"userAgentParser,omitempty" tf:"user_agent_parser"`
}

type CustomPipelineSpecProcessorPipeline struct {
	Filter []CustomPipelineSpecProcessorPipelineFilter `json:"filter" tf:"filter"`
	// +optional
	IsEnabled *bool   `json:"isEnabled,omitempty" tf:"is_enabled"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	Processor []CustomPipelineSpecProcessorPipelineProcessor `json:"processor,omitempty" tf:"processor"`
}

type CustomPipelineSpecProcessorServiceRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorStatusRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorStringBuilderProcessor struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If it replaces all missing attributes of template by an empty string.
	// +optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing"`
	// The name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target" tf:"target"`
	// The formula with one or more attributes and raw text.
	Template *string `json:"template" tf:"template"`
}

type CustomPipelineSpecProcessorTraceIDRemapper struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
}

type CustomPipelineSpecProcessorUrlParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Normalize the ending slashes or not.
	// +optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessorUserAgentParser struct {
	// If the processor is enabled or not.
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// If the source attribute is URL encoded or not.
	// +optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded"`
	// Name of the processor
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// List of source attributes.
	Sources []string `json:"sources" tf:"sources"`
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target" tf:"target"`
}

type CustomPipelineSpecProcessor struct {
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +optional
	ArithmeticProcessor *CustomPipelineSpecProcessorArithmeticProcessor `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor"`
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +optional
	AttributeRemapper *CustomPipelineSpecProcessorAttributeRemapper `json:"attributeRemapper,omitempty" tf:"attribute_remapper"`
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +optional
	CategoryProcessor *CustomPipelineSpecProcessorCategoryProcessor `json:"categoryProcessor,omitempty" tf:"category_processor"`
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +optional
	DateRemapper *CustomPipelineSpecProcessorDateRemapper `json:"dateRemapper,omitempty" tf:"date_remapper"`
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +optional
	GeoIPParser *CustomPipelineSpecProcessorGeoIPParser `json:"geoIPParser,omitempty" tf:"geo_ip_parser"`
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +optional
	GrokParser *CustomPipelineSpecProcessorGrokParser `json:"grokParser,omitempty" tf:"grok_parser"`
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +optional
	LookupProcessor *CustomPipelineSpecProcessorLookupProcessor `json:"lookupProcessor,omitempty" tf:"lookup_processor"`
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +optional
	MessageRemapper *CustomPipelineSpecProcessorMessageRemapper `json:"messageRemapper,omitempty" tf:"message_remapper"`
	// +optional
	Pipeline *CustomPipelineSpecProcessorPipeline `json:"pipeline,omitempty" tf:"pipeline"`
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +optional
	ServiceRemapper *CustomPipelineSpecProcessorServiceRemapper `json:"serviceRemapper,omitempty" tf:"service_remapper"`
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +optional
	StatusRemapper *CustomPipelineSpecProcessorStatusRemapper `json:"statusRemapper,omitempty" tf:"status_remapper"`
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +optional
	StringBuilderProcessor *CustomPipelineSpecProcessorStringBuilderProcessor `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor"`
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +optional
	TraceIDRemapper *CustomPipelineSpecProcessorTraceIDRemapper `json:"traceIDRemapper,omitempty" tf:"trace_id_remapper"`
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +optional
	UrlParser *CustomPipelineSpecProcessorUrlParser `json:"urlParser,omitempty" tf:"url_parser"`
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +optional
	UserAgentParser *CustomPipelineSpecProcessorUserAgentParser `json:"userAgentParser,omitempty" tf:"user_agent_parser"`
}

type CustomPipelineSpec struct {
	State *CustomPipelineSpecResource `json:"state,omitempty" tf:"-"`

	Resource CustomPipelineSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type CustomPipelineSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Filter []CustomPipelineSpecFilter `json:"filter" tf:"filter"`
	// +optional
	IsEnabled *bool   `json:"isEnabled,omitempty" tf:"is_enabled"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	Processor []CustomPipelineSpecProcessor `json:"processor,omitempty" tf:"processor"`
}

type CustomPipelineStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CustomPipelineList is a list of CustomPipelines
type CustomPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CustomPipeline CRD objects
	Items []CustomPipeline `json:"items,omitempty"`
}
