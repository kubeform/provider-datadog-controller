/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Metadata struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetadataSpec   `json:"spec,omitempty"`
	Status            MetadataStatus `json:"status,omitempty"`
}

type MetadataSpec struct {
	State *MetadataSpecResource `json:"state,omitempty" tf:"-"`

	Resource MetadataSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type MetadataSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// A description of the metric.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The name of the metric.
	Metric *string `json:"metric" tf:"metric"`
	// Per unit of the metric such as `second` in `bytes per second`.
	// +optional
	PerUnit *string `json:"perUnit,omitempty" tf:"per_unit"`
	// A short name of the metric.
	// +optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name"`
	// If applicable, statsd flush interval in seconds for the metric.
	// +optional
	StatsdInterval *int64 `json:"statsdInterval,omitempty" tf:"statsd_interval"`
	// Type of the metric.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Primary unit of the metric such as `byte` or `operation`.
	// +optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
}

type MetadataStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MetadataList is a list of Metadatas
type MetadataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Metadata CRD objects
	Items []Metadata `json:"items,omitempty"`
}
