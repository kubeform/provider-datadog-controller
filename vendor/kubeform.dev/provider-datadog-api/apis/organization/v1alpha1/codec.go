/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettings{}).Type1()):                           SettingsSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSaml{}).Type1()):                       SettingsSpecSettingsSamlCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlAutocreateUsersDomains{}).Type1()): SettingsSpecSettingsSamlAutocreateUsersDomainsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlIdpInitiatedLogin{}).Type1()):      SettingsSpecSettingsSamlIdpInitiatedLoginCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlStrictMode{}).Type1()):             SettingsSpecSettingsSamlStrictModeCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettings{}).Type1()):                           SettingsSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSaml{}).Type1()):                       SettingsSpecSettingsSamlCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlAutocreateUsersDomains{}).Type1()): SettingsSpecSettingsSamlAutocreateUsersDomainsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlIdpInitiatedLogin{}).Type1()):      SettingsSpecSettingsSamlIdpInitiatedLoginCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlStrictMode{}).Type1()):             SettingsSpecSettingsSamlStrictModeCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type SettingsSpecSettingsCodec struct {
}

func (SettingsSpecSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SettingsSpecSettings)(ptr) == nil
}

func (SettingsSpecSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SettingsSpecSettings)(ptr)
	var objs []SettingsSpecSettings
	if obj != nil {
		objs = []SettingsSpecSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SettingsSpecSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SettingsSpecSettings)(ptr) = SettingsSpecSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SettingsSpecSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SettingsSpecSettings)(ptr) = objs[0]
			} else {
				*(*SettingsSpecSettings)(ptr) = SettingsSpecSettings{}
			}
		} else {
			*(*SettingsSpecSettings)(ptr) = SettingsSpecSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SettingsSpecSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SettingsSpecSettings)(ptr) = obj
		} else {
			*(*SettingsSpecSettings)(ptr) = SettingsSpecSettings{}
		}
	default:
		iter.ReportError("decode SettingsSpecSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SettingsSpecSettingsSamlCodec struct {
}

func (SettingsSpecSettingsSamlCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SettingsSpecSettingsSaml)(ptr) == nil
}

func (SettingsSpecSettingsSamlCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SettingsSpecSettingsSaml)(ptr)
	var objs []SettingsSpecSettingsSaml
	if obj != nil {
		objs = []SettingsSpecSettingsSaml{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSaml{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SettingsSpecSettingsSamlCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SettingsSpecSettingsSaml)(ptr) = SettingsSpecSettingsSaml{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SettingsSpecSettingsSaml

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSaml{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SettingsSpecSettingsSaml)(ptr) = objs[0]
			} else {
				*(*SettingsSpecSettingsSaml)(ptr) = SettingsSpecSettingsSaml{}
			}
		} else {
			*(*SettingsSpecSettingsSaml)(ptr) = SettingsSpecSettingsSaml{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SettingsSpecSettingsSaml

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSaml{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SettingsSpecSettingsSaml)(ptr) = obj
		} else {
			*(*SettingsSpecSettingsSaml)(ptr) = SettingsSpecSettingsSaml{}
		}
	default:
		iter.ReportError("decode SettingsSpecSettingsSaml", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SettingsSpecSettingsSamlAutocreateUsersDomainsCodec struct {
}

func (SettingsSpecSettingsSamlAutocreateUsersDomainsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) == nil
}

func (SettingsSpecSettingsSamlAutocreateUsersDomainsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr)
	var objs []SettingsSpecSettingsSamlAutocreateUsersDomains
	if obj != nil {
		objs = []SettingsSpecSettingsSamlAutocreateUsersDomains{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlAutocreateUsersDomains{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SettingsSpecSettingsSamlAutocreateUsersDomainsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = SettingsSpecSettingsSamlAutocreateUsersDomains{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SettingsSpecSettingsSamlAutocreateUsersDomains

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlAutocreateUsersDomains{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = objs[0]
			} else {
				*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = SettingsSpecSettingsSamlAutocreateUsersDomains{}
			}
		} else {
			*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = SettingsSpecSettingsSamlAutocreateUsersDomains{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SettingsSpecSettingsSamlAutocreateUsersDomains

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlAutocreateUsersDomains{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = obj
		} else {
			*(*SettingsSpecSettingsSamlAutocreateUsersDomains)(ptr) = SettingsSpecSettingsSamlAutocreateUsersDomains{}
		}
	default:
		iter.ReportError("decode SettingsSpecSettingsSamlAutocreateUsersDomains", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SettingsSpecSettingsSamlIdpInitiatedLoginCodec struct {
}

func (SettingsSpecSettingsSamlIdpInitiatedLoginCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) == nil
}

func (SettingsSpecSettingsSamlIdpInitiatedLoginCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr)
	var objs []SettingsSpecSettingsSamlIdpInitiatedLogin
	if obj != nil {
		objs = []SettingsSpecSettingsSamlIdpInitiatedLogin{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlIdpInitiatedLogin{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SettingsSpecSettingsSamlIdpInitiatedLoginCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = SettingsSpecSettingsSamlIdpInitiatedLogin{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SettingsSpecSettingsSamlIdpInitiatedLogin

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlIdpInitiatedLogin{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = objs[0]
			} else {
				*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = SettingsSpecSettingsSamlIdpInitiatedLogin{}
			}
		} else {
			*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = SettingsSpecSettingsSamlIdpInitiatedLogin{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SettingsSpecSettingsSamlIdpInitiatedLogin

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlIdpInitiatedLogin{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = obj
		} else {
			*(*SettingsSpecSettingsSamlIdpInitiatedLogin)(ptr) = SettingsSpecSettingsSamlIdpInitiatedLogin{}
		}
	default:
		iter.ReportError("decode SettingsSpecSettingsSamlIdpInitiatedLogin", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SettingsSpecSettingsSamlStrictModeCodec struct {
}

func (SettingsSpecSettingsSamlStrictModeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SettingsSpecSettingsSamlStrictMode)(ptr) == nil
}

func (SettingsSpecSettingsSamlStrictModeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SettingsSpecSettingsSamlStrictMode)(ptr)
	var objs []SettingsSpecSettingsSamlStrictMode
	if obj != nil {
		objs = []SettingsSpecSettingsSamlStrictMode{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlStrictMode{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SettingsSpecSettingsSamlStrictModeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SettingsSpecSettingsSamlStrictMode)(ptr) = SettingsSpecSettingsSamlStrictMode{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SettingsSpecSettingsSamlStrictMode

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlStrictMode{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SettingsSpecSettingsSamlStrictMode)(ptr) = objs[0]
			} else {
				*(*SettingsSpecSettingsSamlStrictMode)(ptr) = SettingsSpecSettingsSamlStrictMode{}
			}
		} else {
			*(*SettingsSpecSettingsSamlStrictMode)(ptr) = SettingsSpecSettingsSamlStrictMode{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SettingsSpecSettingsSamlStrictMode

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SettingsSpecSettingsSamlStrictMode{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SettingsSpecSettingsSamlStrictMode)(ptr) = obj
		} else {
			*(*SettingsSpecSettingsSamlStrictMode)(ptr) = SettingsSpecSettingsSamlStrictMode{}
		}
	default:
		iter.ReportError("decode SettingsSpecSettingsSamlStrictMode", "unexpected JSON type")
	}
}
