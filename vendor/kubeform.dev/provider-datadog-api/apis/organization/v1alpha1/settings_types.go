/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Settings struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsSpec   `json:"spec,omitempty"`
	Status            SettingsStatus `json:"status,omitempty"`
}

type SettingsSpecSettingsSaml struct {
	// Whether or not SAML is enabled for this organization.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SettingsSpecSettingsSamlAutocreateUsersDomains struct {
	// List of domains where the SAML automated user creation is enabled.
	// +optional
	Domains []string `json:"domains,omitempty" tf:"domains"`
	// Whether or not the automated user creation based on SAML domain is enabled.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SettingsSpecSettingsSamlIdpInitiatedLogin struct {
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SettingsSpecSettingsSamlStrictMode struct {
	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SettingsSpecSettings struct {
	// Whether or not the organization users can share widgets outside of Datadog.
	// +optional
	PrivateWidgetShare *bool `json:"privateWidgetShare,omitempty" tf:"private_widget_share"`
	// SAML properties
	Saml *SettingsSpecSettingsSaml `json:"saml" tf:"saml"`
	// The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
	// +optional
	SamlAutocreateAccessRole *string `json:"samlAutocreateAccessRole,omitempty" tf:"saml_autocreate_access_role"`
	// List of domains where the SAML automated user creation is enabled.
	SamlAutocreateUsersDomains *SettingsSpecSettingsSamlAutocreateUsersDomains `json:"samlAutocreateUsersDomains" tf:"saml_autocreate_users_domains"`
	// Whether or not SAML can be enabled for this organization.
	// +optional
	SamlCanBeEnabled *bool `json:"samlCanBeEnabled,omitempty" tf:"saml_can_be_enabled"`
	// Identity provider endpoint for SAML authentication.
	// +optional
	SamlIdpEndpoint *string `json:"samlIdpEndpoint,omitempty" tf:"saml_idp_endpoint"`
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	SamlIdpInitiatedLogin *SettingsSpecSettingsSamlIdpInitiatedLogin `json:"samlIdpInitiatedLogin" tf:"saml_idp_initiated_login"`
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +optional
	SamlIdpMetadataUploaded *bool `json:"samlIdpMetadataUploaded,omitempty" tf:"saml_idp_metadata_uploaded"`
	// URL for SAML logging.
	// +optional
	SamlLoginURL *string `json:"samlLoginURL,omitempty" tf:"saml_login_url"`
	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	SamlStrictMode *SettingsSpecSettingsSamlStrictMode `json:"samlStrictMode" tf:"saml_strict_mode"`
}

type SettingsSpec struct {
	State *SettingsSpecResource `json:"state,omitempty" tf:"-"`

	Resource SettingsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SettingsSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Description of the organization.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Name for Organization.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The `public_id` of the organization you are operating within.
	// +optional
	PublicID *string `json:"publicID,omitempty" tf:"public_id"`
	// Organization settings
	// +optional
	Settings *SettingsSpecSettings `json:"settings,omitempty" tf:"settings"`
}

type SettingsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SettingsList is a list of Settingss
type SettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Settings CRD objects
	Items []Settings `json:"items,omitempty"`
}
