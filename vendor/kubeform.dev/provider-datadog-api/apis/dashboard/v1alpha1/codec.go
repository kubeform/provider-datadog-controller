/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertGraphDefinition{}).Type1()):                                                                          DashboardSpecWidgetAlertGraphDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertValueDefinition{}).Type1()):                                                                          DashboardSpecWidgetAlertValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinition{}).Type1()):                                                                              DashboardSpecWidgetChangeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}).Type1()):                                                           DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}).Type1()):                                                           DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                           DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                             DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}).Type1()):                                                        DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                             DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                  DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1()):                                                       DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1()):                                                      DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}).Type1()):                                                          DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetCheckStatusDefinition{}).Type1()):                                                                         DashboardSpecWidgetCheckStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinition{}).Type1()):                                                                        DashboardSpecWidgetDistributionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}).Type1()):                                                     DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestStyle{}).Type1()):                                                            DashboardSpecWidgetDistributionDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventStreamDefinition{}).Type1()):                                                                         DashboardSpecWidgetEventStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventTimelineDefinition{}).Type1()):                                                                       DashboardSpecWidgetEventTimelineDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetFreeTextDefinition{}).Type1()):                                                                            DashboardSpecWidgetFreeTextDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinition{}).Type1()):                                                                              DashboardSpecWidgetGeomapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}).Type1()):                                                           DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}).Type1()):                                                               DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                           DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                             DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1()):                                                        DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                             DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                  DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1()):                                                       DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1()):                                                      DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}).Type1()):                                                               DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionStyle{}).Type1()):                                                                         DashboardSpecWidgetGeomapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionView{}).Type1()):                                                                          DashboardSpecWidgetGeomapDefinitionViewCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinition{}).Type1()):                                                                               DashboardSpecWidgetGroupDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}).Type1()):                                       DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}).Type1()):                                                  DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}).Type1()):                                                       DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}).Type1()):                                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1()):                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1()):                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}).Type1()):                                                          DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}).Type1()):                                                      DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}).Type1()):                                                  DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}).Type1()):                                                           DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}).Type1()):                                             DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1()): DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1()):   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1()):              DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1()):   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1()):        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1()):             DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1()):            DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}).Type1()):                                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}).Type1()):                                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}).Type1()):                                                       DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}).Type1()):                                           DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1()):                           DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}).Type1()):                                           DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}).Type1()):                                                DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}).Type1()):                                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1()):                           DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}).Type1()):                                                             DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinition{}).Type1()):                                                                             DashboardSpecWidgetHeatmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}).Type1()):                                                          DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1()):                                                         DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestStyle{}).Type1()):                                                                 DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionYaxis{}).Type1()):                                                                        DashboardSpecWidgetHeatmapDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinition{}).Type1()):                                                                             DashboardSpecWidgetHostmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequest{}).Type1()):                                                                      DashboardSpecWidgetHostmapDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1()):                                                      DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1()):                                                     DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1()):                                         DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1()):                                     DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1()):                                                      DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1()):                                                     DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1()):                                         DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1()):                                     DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionStyle{}).Type1()):                                                                        DashboardSpecWidgetHostmapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetIframeDefinition{}).Type1()):                                                                              DashboardSpecWidgetIframeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetImageDefinition{}).Type1()):                                                                               DashboardSpecWidgetImageDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinition{}).Type1()):                                                                           DashboardSpecWidgetLogStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinitionSort{}).Type1()):                                                                       DashboardSpecWidgetLogStreamDefinitionSortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetManageStatusDefinition{}).Type1()):                                                                        DashboardSpecWidgetManageStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetNoteDefinition{}).Type1()):                                                                                DashboardSpecWidgetNoteDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinition{}).Type1()):                                                                          DashboardSpecWidgetQueryTableDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1()):                                                      DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinition{}).Type1()):                                                                          DashboardSpecWidgetQueryValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}).Type1()):                                                         DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinition{}).Type1()):                                                                         DashboardSpecWidgetScatterplotDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequest{}).Type1()):                                                                  DashboardSpecWidgetScatterplotDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1()):                                                     DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1()):                                                     DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionXaxis{}).Type1()):                                                                    DashboardSpecWidgetScatterplotDefinitionXaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionYaxis{}).Type1()):                                                                    DashboardSpecWidgetScatterplotDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServiceLevelObjectiveDefinition{}).Type1()):                                                               DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServicemapDefinition{}).Type1()):                                                                          DashboardSpecWidgetServicemapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinition{}).Type1()):                                                                            DashboardSpecWidgetSunburstDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendInline{}).Type1()):                                                                DashboardSpecWidgetSunburstDefinitionLegendInlineCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendTable{}).Type1()):                                                                 DashboardSpecWidgetSunburstDefinitionLegendTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}).Type1()):                                                           DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                         DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1()):                                                      DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1()):                                                     DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1()):                                                    DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}).Type1()):                                                        DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                            DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                        DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinition{}).Type1()):                                                                          DashboardSpecWidgetTimeseriesDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1()):                                                         DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                                       DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}).Type1()):                                                              DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}).Type1()):                                                                DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionYaxis{}).Type1()):                                                                     DashboardSpecWidgetTimeseriesDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinition{}).Type1()):                                                                             DashboardSpecWidgetToplistDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}).Type1()):                                                            DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                                DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}).Type1()):                                                          DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}).Type1()):                                                          DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                          DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}).Type1()):                                                       DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                 DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1()):                                                      DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1()):                                                     DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}).Type1()):                                                         DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestStyle{}).Type1()):                                                                 DashboardSpecWidgetToplistDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTraceServiceDefinition{}).Type1()):                                                                        DashboardSpecWidgetTraceServiceDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetWidgetLayout{}).Type1()):                                                                                  DashboardSpecWidgetWidgetLayoutCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertGraphDefinition{}).Type1()):                                                                          DashboardSpecWidgetAlertGraphDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertValueDefinition{}).Type1()):                                                                          DashboardSpecWidgetAlertValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinition{}).Type1()):                                                                              DashboardSpecWidgetChangeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}).Type1()):                                                           DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}).Type1()):                                                           DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                           DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                             DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}).Type1()):                                                        DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                             DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                  DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1()):                                                       DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1()):                                                      DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQuery{}).Type1()):                                                               DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}).Type1()):                                                          DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetCheckStatusDefinition{}).Type1()):                                                                         DashboardSpecWidgetCheckStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinition{}).Type1()):                                                                        DashboardSpecWidgetDistributionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}).Type1()):                                                     DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}).Type1()):                                                         DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestStyle{}).Type1()):                                                            DashboardSpecWidgetDistributionDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventStreamDefinition{}).Type1()):                                                                         DashboardSpecWidgetEventStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventTimelineDefinition{}).Type1()):                                                                       DashboardSpecWidgetEventTimelineDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetFreeTextDefinition{}).Type1()):                                                                            DashboardSpecWidgetFreeTextDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinition{}).Type1()):                                                                              DashboardSpecWidgetGeomapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}).Type1()):                                                           DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}).Type1()):                                                               DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                           DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                             DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1()):                                                        DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                             DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                  DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1()):                                                       DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1()):                                                      DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}).Type1()):                                                               DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                   DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                               DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionStyle{}).Type1()):                                                                         DashboardSpecWidgetGeomapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionView{}).Type1()):                                                                          DashboardSpecWidgetGeomapDefinitionViewCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinition{}).Type1()):                                                                               DashboardSpecWidgetGroupDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}).Type1()):                                       DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}).Type1()):                                                  DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}).Type1()):                                                       DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}).Type1()):                                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1()):                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1()):                DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}).Type1()):                                                         DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}).Type1()):                                                          DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}).Type1()):                                                      DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}).Type1()):                                                  DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}).Type1()):                                                           DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}).Type1()):                                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}).Type1()):                                             DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1()): DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1()):   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1()):              DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1()):   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1()):        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1()):             DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1()):            DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1()):               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}).Type1()):                                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}).Type1()):                                               DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}).Type1()):                                          DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}).Type1()):                                                       DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}).Type1()):                                           DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1()):                           DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}).Type1()):                                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}).Type1()):                                   DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                   DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}).Type1()):                                                     DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                  DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1()):                               DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1()):                              DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}).Type1()):                                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1()):                          DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                      DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                 DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}).Type1()):                                           DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}).Type1()):                                                DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}).Type1()):                                                        DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}).Type1()):                                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1()):                           DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}).Type1()):                                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                     DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}).Type1()):                                  DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                       DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1()):                            DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1()):                                 DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1()):                                DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}).Type1()):                                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1()):                             DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                         DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}).Type1()):                                    DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                        DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                    DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}).Type1()):                                            DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}).Type1()):                                                   DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}).Type1()):                                                             DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinition{}).Type1()):                                                                             DashboardSpecWidgetHeatmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}).Type1()):                                                          DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}).Type1()):                                                              DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1()):                                                         DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestStyle{}).Type1()):                                                                 DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionYaxis{}).Type1()):                                                                        DashboardSpecWidgetHeatmapDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinition{}).Type1()):                                                                             DashboardSpecWidgetHostmapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequest{}).Type1()):                                                                      DashboardSpecWidgetHostmapDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1()):                                                      DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1()):                                                     DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1()):                                         DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1()):                                     DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1()):                                                      DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1()):                                                          DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1()):                                              DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1()):                                          DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1()):                                                     DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1()):                                         DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1()):                                     DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionStyle{}).Type1()):                                                                        DashboardSpecWidgetHostmapDefinitionStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetIframeDefinition{}).Type1()):                                                                              DashboardSpecWidgetIframeDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetImageDefinition{}).Type1()):                                                                               DashboardSpecWidgetImageDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinition{}).Type1()):                                                                           DashboardSpecWidgetLogStreamDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinitionSort{}).Type1()):                                                                       DashboardSpecWidgetLogStreamDefinitionSortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetManageStatusDefinition{}).Type1()):                                                                        DashboardSpecWidgetManageStatusDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetNoteDefinition{}).Type1()):                                                                                DashboardSpecWidgetNoteDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinition{}).Type1()):                                                                          DashboardSpecWidgetQueryTableDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1()):                                                      DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinition{}).Type1()):                                                                          DashboardSpecWidgetQueryValueDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}).Type1()):                                                         DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinition{}).Type1()):                                                                         DashboardSpecWidgetScatterplotDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequest{}).Type1()):                                                                  DashboardSpecWidgetScatterplotDefinitionRequestCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1()):                      DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1()):                        DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1()):                                   DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1()):                        DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1()):                             DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1()):                                  DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1()):                                 DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1()):                                                     DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1()):                                                     DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}).Type1()):                                                         DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1()):                                                    DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1()):                                        DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1()):                                    DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionXaxis{}).Type1()):                                                                    DashboardSpecWidgetScatterplotDefinitionXaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionYaxis{}).Type1()):                                                                    DashboardSpecWidgetScatterplotDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServiceLevelObjectiveDefinition{}).Type1()):                                                               DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServicemapDefinition{}).Type1()):                                                                          DashboardSpecWidgetServicemapDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinition{}).Type1()):                                                                            DashboardSpecWidgetSunburstDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendInline{}).Type1()):                                                                DashboardSpecWidgetSunburstDefinitionLegendInlineCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendTable{}).Type1()):                                                                 DashboardSpecWidgetSunburstDefinitionLegendTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}).Type1()):                                                           DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}).Type1()):                                                         DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                         DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1()):                                                      DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                           DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1()):                                                     DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1()):                                                    DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}).Type1()):                                                             DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                 DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                             DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}).Type1()):                                                        DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                            DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                        DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinition{}).Type1()):                                                                          DashboardSpecWidgetTimeseriesDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1()):                                                         DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1()):                                       DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1()):                                                       DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                       DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1()):                                                    DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                         DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1()):                                              DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1()):                                                   DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1()):                                                  DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}).Type1()):                                                           DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1()):                                               DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                           DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1()):                                                      DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                          DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                      DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}).Type1()):                                                              DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}).Type1()):                                                                DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionYaxis{}).Type1()):                                                                     DashboardSpecWidgetTimeseriesDefinitionYaxisCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinition{}).Type1()):                                                                             DashboardSpecWidgetToplistDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}).Type1()):                                                            DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1()):                                                DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}).Type1()):                                                          DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}).Type1()):                                                          DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1()):                                          DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}).Type1()):                                                       DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1()):                                            DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1()):                                                 DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1()):                                                      DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1()):                                                     DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQuery{}).Type1()):                                                              DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1()):                                                  DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1()):                                              DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}).Type1()):                                                         DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1()):                                             DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1()):                                         DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestStyle{}).Type1()):                                                                 DashboardSpecWidgetToplistDefinitionRequestStyleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTraceServiceDefinition{}).Type1()):                                                                        DashboardSpecWidgetTraceServiceDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetWidgetLayout{}).Type1()):                                                                                  DashboardSpecWidgetWidgetLayoutCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetAlertGraphDefinitionCodec struct {
}

func (DashboardSpecWidgetAlertGraphDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetAlertGraphDefinition)(ptr) == nil
}

func (DashboardSpecWidgetAlertGraphDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetAlertGraphDefinition)(ptr)
	var objs []DashboardSpecWidgetAlertGraphDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetAlertGraphDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertGraphDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetAlertGraphDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetAlertGraphDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetAlertGraphDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertGraphDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetAlertGraphDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetAlertGraphDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetAlertGraphDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertGraphDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetAlertGraphDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetAlertGraphDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetAlertValueDefinitionCodec struct {
}

func (DashboardSpecWidgetAlertValueDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetAlertValueDefinition)(ptr) == nil
}

func (DashboardSpecWidgetAlertValueDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetAlertValueDefinition)(ptr)
	var objs []DashboardSpecWidgetAlertValueDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetAlertValueDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertValueDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetAlertValueDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetAlertValueDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetAlertValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetAlertValueDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetAlertValueDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetAlertValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetAlertValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetAlertValueDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetAlertValueDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinition)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinition)(ptr)
	var objs []DashboardSpecWidgetChangeDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinition)(ptr) = DashboardSpecWidgetChangeDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinition)(ptr) = DashboardSpecWidgetChangeDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinition)(ptr) = DashboardSpecWidgetChangeDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinition)(ptr) = DashboardSpecWidgetChangeDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetChangeDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetCheckStatusDefinitionCodec struct {
}

func (DashboardSpecWidgetCheckStatusDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetCheckStatusDefinition)(ptr) == nil
}

func (DashboardSpecWidgetCheckStatusDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetCheckStatusDefinition)(ptr)
	var objs []DashboardSpecWidgetCheckStatusDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetCheckStatusDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetCheckStatusDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetCheckStatusDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetCheckStatusDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetCheckStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetCheckStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetCheckStatusDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetCheckStatusDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetCheckStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetCheckStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetCheckStatusDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetCheckStatusDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinition)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinition)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetDistributionDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetDistributionDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetDistributionDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetDistributionDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetDistributionDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetDistributionDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetDistributionDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetDistributionDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetDistributionDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetDistributionDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetDistributionDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetDistributionDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetDistributionDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetDistributionDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetDistributionDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetEventStreamDefinitionCodec struct {
}

func (DashboardSpecWidgetEventStreamDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetEventStreamDefinition)(ptr) == nil
}

func (DashboardSpecWidgetEventStreamDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetEventStreamDefinition)(ptr)
	var objs []DashboardSpecWidgetEventStreamDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetEventStreamDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventStreamDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetEventStreamDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetEventStreamDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetEventStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetEventStreamDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetEventStreamDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetEventStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetEventStreamDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetEventStreamDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetEventTimelineDefinitionCodec struct {
}

func (DashboardSpecWidgetEventTimelineDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetEventTimelineDefinition)(ptr) == nil
}

func (DashboardSpecWidgetEventTimelineDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetEventTimelineDefinition)(ptr)
	var objs []DashboardSpecWidgetEventTimelineDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetEventTimelineDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventTimelineDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetEventTimelineDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetEventTimelineDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetEventTimelineDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventTimelineDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetEventTimelineDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetEventTimelineDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetEventTimelineDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetEventTimelineDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetEventTimelineDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetEventTimelineDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetFreeTextDefinitionCodec struct {
}

func (DashboardSpecWidgetFreeTextDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetFreeTextDefinition)(ptr) == nil
}

func (DashboardSpecWidgetFreeTextDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetFreeTextDefinition)(ptr)
	var objs []DashboardSpecWidgetFreeTextDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetFreeTextDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetFreeTextDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetFreeTextDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetFreeTextDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetFreeTextDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetFreeTextDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetFreeTextDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetFreeTextDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetFreeTextDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetFreeTextDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetFreeTextDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetFreeTextDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinition)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGeomapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGeomapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGeomapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGeomapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionStyleCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionStyle)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGeomapDefinitionStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGeomapDefinitionStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGeomapDefinitionStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGeomapDefinitionStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGeomapDefinitionViewCodec struct {
}

func (DashboardSpecWidgetGeomapDefinitionViewCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGeomapDefinitionView)(ptr) == nil
}

func (DashboardSpecWidgetGeomapDefinitionViewCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGeomapDefinitionView)(ptr)
	var objs []DashboardSpecWidgetGeomapDefinitionView
	if obj != nil {
		objs = []DashboardSpecWidgetGeomapDefinitionView{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionView{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGeomapDefinitionViewCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGeomapDefinitionView{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGeomapDefinitionView

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionView{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGeomapDefinitionView{}
			}
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGeomapDefinitionView{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGeomapDefinitionView

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGeomapDefinitionView{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGeomapDefinitionView{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGeomapDefinitionView", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinition)(ptr) = DashboardSpecWidgetGroupDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinition)(ptr) = DashboardSpecWidgetGroupDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinition)(ptr) = DashboardSpecWidgetGroupDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinition)(ptr) = DashboardSpecWidgetGroupDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetAlertGraphDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetAlertValueDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetCheckStatusDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetEventStreamDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetEventTimelineDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetFreeTextDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionViewCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetGeomapDefinitionView", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequest", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetHostmapDefinitionStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetIframeDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetIframeDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetImageDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetImageDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetImageDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetImageDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetImageDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetImageDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetImageDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetLogStreamDefinitionSort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetManageStatusDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetNoteDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetNoteDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequest", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetServicemapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetTraceServiceDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec struct {
}

func (DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) == nil
}

func (DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr)
	var objs []DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout
	if obj != nil {
		objs = []DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetGroupDefinitionWidgetWidgetLayoutCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}
			}
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout)(ptr) = DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetGroupDefinitionWidgetWidgetLayout", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinition)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetHeatmapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetHeatmapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetHeatmapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinition)(ptr) = DashboardSpecWidgetHeatmapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionRequestStyle)(ptr) = DashboardSpecWidgetHeatmapDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHeatmapDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetHeatmapDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetHeatmapDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetHeatmapDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetHeatmapDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHeatmapDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetHeatmapDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHeatmapDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetHeatmapDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetHeatmapDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHeatmapDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHeatmapDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHeatmapDefinitionYaxis)(ptr) = DashboardSpecWidgetHeatmapDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHeatmapDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinition)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetHostmapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetHostmapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetHostmapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinition)(ptr) = DashboardSpecWidgetHostmapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequest)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequest
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequest{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequest{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetHostmapDefinitionRequest{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetHostmapDefinitionRequest{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetHostmapDefinitionRequest{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequest)(ptr) = DashboardSpecWidgetHostmapDefinitionRequest{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequest", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetHostmapDefinitionStyleCodec struct {
}

func (DashboardSpecWidgetHostmapDefinitionStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) == nil
}

func (DashboardSpecWidgetHostmapDefinitionStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetHostmapDefinitionStyle)(ptr)
	var objs []DashboardSpecWidgetHostmapDefinitionStyle
	if obj != nil {
		objs = []DashboardSpecWidgetHostmapDefinitionStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetHostmapDefinitionStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetHostmapDefinitionStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetHostmapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetHostmapDefinitionStyle{}
			}
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetHostmapDefinitionStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetHostmapDefinitionStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetHostmapDefinitionStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetHostmapDefinitionStyle)(ptr) = DashboardSpecWidgetHostmapDefinitionStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetHostmapDefinitionStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetIframeDefinitionCodec struct {
}

func (DashboardSpecWidgetIframeDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetIframeDefinition)(ptr) == nil
}

func (DashboardSpecWidgetIframeDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetIframeDefinition)(ptr)
	var objs []DashboardSpecWidgetIframeDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetIframeDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetIframeDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetIframeDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetIframeDefinition)(ptr) = DashboardSpecWidgetIframeDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetIframeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetIframeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetIframeDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetIframeDefinition)(ptr) = DashboardSpecWidgetIframeDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetIframeDefinition)(ptr) = DashboardSpecWidgetIframeDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetIframeDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetIframeDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetIframeDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetIframeDefinition)(ptr) = DashboardSpecWidgetIframeDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetIframeDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetImageDefinitionCodec struct {
}

func (DashboardSpecWidgetImageDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetImageDefinition)(ptr) == nil
}

func (DashboardSpecWidgetImageDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetImageDefinition)(ptr)
	var objs []DashboardSpecWidgetImageDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetImageDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetImageDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetImageDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetImageDefinition)(ptr) = DashboardSpecWidgetImageDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetImageDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetImageDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetImageDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetImageDefinition)(ptr) = DashboardSpecWidgetImageDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetImageDefinition)(ptr) = DashboardSpecWidgetImageDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetImageDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetImageDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetImageDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetImageDefinition)(ptr) = DashboardSpecWidgetImageDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetImageDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetLogStreamDefinitionCodec struct {
}

func (DashboardSpecWidgetLogStreamDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetLogStreamDefinition)(ptr) == nil
}

func (DashboardSpecWidgetLogStreamDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetLogStreamDefinition)(ptr)
	var objs []DashboardSpecWidgetLogStreamDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetLogStreamDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetLogStreamDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetLogStreamDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetLogStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetLogStreamDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetLogStreamDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetLogStreamDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetLogStreamDefinition)(ptr) = DashboardSpecWidgetLogStreamDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetLogStreamDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetLogStreamDefinitionSortCodec struct {
}

func (DashboardSpecWidgetLogStreamDefinitionSortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) == nil
}

func (DashboardSpecWidgetLogStreamDefinitionSortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetLogStreamDefinitionSort)(ptr)
	var objs []DashboardSpecWidgetLogStreamDefinitionSort
	if obj != nil {
		objs = []DashboardSpecWidgetLogStreamDefinitionSort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinitionSort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetLogStreamDefinitionSortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetLogStreamDefinitionSort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetLogStreamDefinitionSort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinitionSort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetLogStreamDefinitionSort{}
			}
		} else {
			*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetLogStreamDefinitionSort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetLogStreamDefinitionSort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetLogStreamDefinitionSort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetLogStreamDefinitionSort)(ptr) = DashboardSpecWidgetLogStreamDefinitionSort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetLogStreamDefinitionSort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetManageStatusDefinitionCodec struct {
}

func (DashboardSpecWidgetManageStatusDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetManageStatusDefinition)(ptr) == nil
}

func (DashboardSpecWidgetManageStatusDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetManageStatusDefinition)(ptr)
	var objs []DashboardSpecWidgetManageStatusDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetManageStatusDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetManageStatusDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetManageStatusDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetManageStatusDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetManageStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetManageStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetManageStatusDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetManageStatusDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetManageStatusDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetManageStatusDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetManageStatusDefinition)(ptr) = DashboardSpecWidgetManageStatusDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetManageStatusDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetNoteDefinitionCodec struct {
}

func (DashboardSpecWidgetNoteDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetNoteDefinition)(ptr) == nil
}

func (DashboardSpecWidgetNoteDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetNoteDefinition)(ptr)
	var objs []DashboardSpecWidgetNoteDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetNoteDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetNoteDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetNoteDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetNoteDefinition)(ptr) = DashboardSpecWidgetNoteDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetNoteDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetNoteDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetNoteDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetNoteDefinition)(ptr) = DashboardSpecWidgetNoteDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetNoteDefinition)(ptr) = DashboardSpecWidgetNoteDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetNoteDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetNoteDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetNoteDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetNoteDefinition)(ptr) = DashboardSpecWidgetNoteDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetNoteDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinition)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinition)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetQueryTableDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetQueryTableDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetQueryTableDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinition)(ptr) = DashboardSpecWidgetQueryTableDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestApmStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinition)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinition)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetQueryValueDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetQueryValueDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetQueryValueDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinition)(ptr) = DashboardSpecWidgetQueryValueDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinition)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinition)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetScatterplotDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetScatterplotDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetScatterplotDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinition)(ptr) = DashboardSpecWidgetScatterplotDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequest
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequest{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequest{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequest{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequest{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequest{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequest

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequest{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequest)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequest{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequest", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionXaxisCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionXaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionXaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionXaxis
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionXaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionXaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionXaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionXaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionXaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionXaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionXaxis{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionXaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionXaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionXaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionXaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionXaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionXaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetScatterplotDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetScatterplotDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetScatterplotDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetScatterplotDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetScatterplotDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetScatterplotDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetScatterplotDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetScatterplotDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetScatterplotDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetScatterplotDefinitionYaxis)(ptr) = DashboardSpecWidgetScatterplotDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetScatterplotDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec struct {
}

func (DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) == nil
}

func (DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr)
	var objs []DashboardSpecWidgetServiceLevelObjectiveDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetServiceLevelObjectiveDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServiceLevelObjectiveDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetServiceLevelObjectiveDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetServiceLevelObjectiveDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetServiceLevelObjectiveDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServiceLevelObjectiveDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetServiceLevelObjectiveDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetServiceLevelObjectiveDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetServiceLevelObjectiveDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServiceLevelObjectiveDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetServiceLevelObjectiveDefinition)(ptr) = DashboardSpecWidgetServiceLevelObjectiveDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetServiceLevelObjectiveDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetServicemapDefinitionCodec struct {
}

func (DashboardSpecWidgetServicemapDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetServicemapDefinition)(ptr) == nil
}

func (DashboardSpecWidgetServicemapDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetServicemapDefinition)(ptr)
	var objs []DashboardSpecWidgetServicemapDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetServicemapDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServicemapDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetServicemapDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetServicemapDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetServicemapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServicemapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetServicemapDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetServicemapDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetServicemapDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetServicemapDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetServicemapDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetServicemapDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetServicemapDefinition)(ptr) = DashboardSpecWidgetServicemapDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetServicemapDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinition)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinition)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetSunburstDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetSunburstDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetSunburstDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinition)(ptr) = DashboardSpecWidgetSunburstDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionLegendInlineCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionLegendInlineCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionLegendInlineCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionLegendInline
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionLegendInline{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendInline{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionLegendInlineCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendInline{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionLegendInline

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendInline{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendInline{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendInline{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionLegendInline

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendInline{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionLegendInline)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendInline{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionLegendInline", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionLegendTableCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionLegendTableCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionLegendTableCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionLegendTable
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionLegendTable{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendTable{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionLegendTableCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendTable{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionLegendTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendTable{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendTable{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionLegendTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionLegendTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionLegendTable)(ptr) = DashboardSpecWidgetSunburstDefinitionLegendTable{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionLegendTable", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestNetworkQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinition)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinition)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetTimeseriesDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetTimeseriesDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetTimeseriesDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinition)(ptr) = DashboardSpecWidgetTimeseriesDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRequestStyle)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionRightYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionRightYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionRightYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionRightYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionRightYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionRightYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionRightYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionRightYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTimeseriesDefinitionYaxisCodec struct {
}

func (DashboardSpecWidgetTimeseriesDefinitionYaxisCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) == nil
}

func (DashboardSpecWidgetTimeseriesDefinitionYaxisCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr)
	var objs []DashboardSpecWidgetTimeseriesDefinitionYaxis
	if obj != nil {
		objs = []DashboardSpecWidgetTimeseriesDefinitionYaxis{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionYaxis{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTimeseriesDefinitionYaxisCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionYaxis{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTimeseriesDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionYaxis{}
			}
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionYaxis{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTimeseriesDefinitionYaxis

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTimeseriesDefinitionYaxis{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTimeseriesDefinitionYaxis)(ptr) = DashboardSpecWidgetTimeseriesDefinitionYaxis{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTimeseriesDefinitionYaxis", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinition)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinition)(ptr)
	var objs []DashboardSpecWidgetToplistDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinition)(ptr) = DashboardSpecWidgetToplistDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinition)(ptr) = DashboardSpecWidgetToplistDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinition)(ptr) = DashboardSpecWidgetToplistDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinition)(ptr) = DashboardSpecWidgetToplistDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestApmQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestApmQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestApmQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestApmQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestApmQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestApmQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestAuditQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestAuditQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestAuditQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestAuditQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestFormulaLimit
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestFormulaLimitCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestFormulaLimit

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestFormulaLimit)(ptr) = DashboardSpecWidgetToplistDefinitionRequestFormulaLimit{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestFormulaLimit", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestLogQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestLogQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestLogQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestLogQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestLogQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestLogQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryApmResourceStatsQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryEventQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySortCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryEventQueryGroupBySort", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryEventQuerySearch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryMetricQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryMetricQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestQueryProcessQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestQueryProcessQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestRumQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestRumQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestRumQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestRumQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestRumQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestRumQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestSecurityQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestSecurityQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestSecurityQueryComputeQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery)(ptr) = DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetToplistDefinitionRequestStyleCodec struct {
}

func (DashboardSpecWidgetToplistDefinitionRequestStyleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) == nil
}

func (DashboardSpecWidgetToplistDefinitionRequestStyleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr)
	var objs []DashboardSpecWidgetToplistDefinitionRequestStyle
	if obj != nil {
		objs = []DashboardSpecWidgetToplistDefinitionRequestStyle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestStyle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetToplistDefinitionRequestStyleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetToplistDefinitionRequestStyle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetToplistDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetToplistDefinitionRequestStyle{}
			}
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetToplistDefinitionRequestStyle{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetToplistDefinitionRequestStyle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetToplistDefinitionRequestStyle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetToplistDefinitionRequestStyle)(ptr) = DashboardSpecWidgetToplistDefinitionRequestStyle{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetToplistDefinitionRequestStyle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetTraceServiceDefinitionCodec struct {
}

func (DashboardSpecWidgetTraceServiceDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetTraceServiceDefinition)(ptr) == nil
}

func (DashboardSpecWidgetTraceServiceDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetTraceServiceDefinition)(ptr)
	var objs []DashboardSpecWidgetTraceServiceDefinition
	if obj != nil {
		objs = []DashboardSpecWidgetTraceServiceDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTraceServiceDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetTraceServiceDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetTraceServiceDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetTraceServiceDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTraceServiceDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetTraceServiceDefinition{}
			}
		} else {
			*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetTraceServiceDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetTraceServiceDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetTraceServiceDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetTraceServiceDefinition)(ptr) = DashboardSpecWidgetTraceServiceDefinition{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetTraceServiceDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecWidgetWidgetLayoutCodec struct {
}

func (DashboardSpecWidgetWidgetLayoutCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecWidgetWidgetLayout)(ptr) == nil
}

func (DashboardSpecWidgetWidgetLayoutCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecWidgetWidgetLayout)(ptr)
	var objs []DashboardSpecWidgetWidgetLayout
	if obj != nil {
		objs = []DashboardSpecWidgetWidgetLayout{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetWidgetLayout{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecWidgetWidgetLayoutCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecWidgetWidgetLayout)(ptr) = DashboardSpecWidgetWidgetLayout{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecWidgetWidgetLayout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetWidgetLayout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecWidgetWidgetLayout)(ptr) = objs[0]
			} else {
				*(*DashboardSpecWidgetWidgetLayout)(ptr) = DashboardSpecWidgetWidgetLayout{}
			}
		} else {
			*(*DashboardSpecWidgetWidgetLayout)(ptr) = DashboardSpecWidgetWidgetLayout{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecWidgetWidgetLayout

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecWidgetWidgetLayout{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecWidgetWidgetLayout)(ptr) = obj
		} else {
			*(*DashboardSpecWidgetWidgetLayout)(ptr) = DashboardSpecWidgetWidgetLayout{}
		}
	default:
		iter.ReportError("decode DashboardSpecWidgetWidgetLayout", "unexpected JSON type")
	}
}
