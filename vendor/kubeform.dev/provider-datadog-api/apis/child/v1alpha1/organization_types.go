/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Organization struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationSpec   `json:"spec,omitempty"`
	Status            OrganizationStatus `json:"status,omitempty"`
}

type OrganizationSpecApiKey struct {
	// API key.
	// +optional
	Key *string `json:"-" sensitive:"true" tf:"key"`
	// Name of your API key.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type OrganizationSpecApplicationKey struct {
	// Hash of an application key.
	// +optional
	Hash *string `json:"-" sensitive:"true" tf:"hash"`
	// Name of an application key.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Owner of an application key.
	// +optional
	Owner *string `json:"owner,omitempty" tf:"owner"`
}

type OrganizationSpecSettingsSaml struct {
	// Whether or not SAML is enabled for this organization.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type OrganizationSpecSettingsSamlAutocreateUsersDomains struct {
	// List of domains where the SAML automated user creation is enabled.
	// +optional
	Domains []string `json:"domains,omitempty" tf:"domains"`
	// Whether or not the automated user creation based on SAML domain is enabled.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type OrganizationSpecSettingsSamlIdpInitiatedLogin struct {
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type OrganizationSpecSettingsSamlStrictMode struct {
	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type OrganizationSpecSettings struct {
	// Whether or not the organization users can share widgets outside of Datadog.
	// +optional
	PrivateWidgetShare *bool `json:"privateWidgetShare,omitempty" tf:"private_widget_share"`
	// SAML properties
	// +optional
	Saml []OrganizationSpecSettingsSaml `json:"saml,omitempty" tf:"saml"`
	// The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
	// +optional
	SamlAutocreateAccessRole *string `json:"samlAutocreateAccessRole,omitempty" tf:"saml_autocreate_access_role"`
	// List of domains where the SAML automated user creation is enabled.
	// +optional
	SamlAutocreateUsersDomains []OrganizationSpecSettingsSamlAutocreateUsersDomains `json:"samlAutocreateUsersDomains,omitempty" tf:"saml_autocreate_users_domains"`
	// Whether or not SAML can be enabled for this organization.
	// +optional
	SamlCanBeEnabled *bool `json:"samlCanBeEnabled,omitempty" tf:"saml_can_be_enabled"`
	// Identity provider endpoint for SAML authentication.
	// +optional
	SamlIdpEndpoint *string `json:"samlIdpEndpoint,omitempty" tf:"saml_idp_endpoint"`
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +optional
	SamlIdpInitiatedLogin []OrganizationSpecSettingsSamlIdpInitiatedLogin `json:"samlIdpInitiatedLogin,omitempty" tf:"saml_idp_initiated_login"`
	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +optional
	SamlIdpMetadataUploaded *bool `json:"samlIdpMetadataUploaded,omitempty" tf:"saml_idp_metadata_uploaded"`
	// URL for SAML logging.
	// +optional
	SamlLoginURL *string `json:"samlLoginURL,omitempty" tf:"saml_login_url"`
	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	// +optional
	SamlStrictMode []OrganizationSpecSettingsSamlStrictMode `json:"samlStrictMode,omitempty" tf:"saml_strict_mode"`
}

type OrganizationSpecUser struct {
	// The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm`, `ro`, `ERROR`
	// +optional
	AccessRole *string `json:"accessRole,omitempty" tf:"access_role"`
	// The new email of the user.
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// The name of the user.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type OrganizationSpec struct {
	State *OrganizationSpecResource `json:"state,omitempty" tf:"-"`

	Resource OrganizationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type OrganizationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Datadog API key.
	// +optional
	ApiKey []OrganizationSpecApiKey `json:"apiKey,omitempty" tf:"api_key"`
	// An application key with its associated metadata.
	// +optional
	ApplicationKey []OrganizationSpecApplicationKey `json:"applicationKey,omitempty" tf:"application_key"`
	// Description of the organization.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Name for Child Organization after creation.
	Name *string `json:"name" tf:"name"`
	// The `public_id` of the organization you are operating within.
	// +optional
	PublicID *string `json:"publicID,omitempty" tf:"public_id"`
	// Organization settings
	// +optional
	Settings []OrganizationSpecSettings `json:"settings,omitempty" tf:"settings"`
	// Information about a user
	// +optional
	User []OrganizationSpecUser `json:"user,omitempty" tf:"user"`
}

type OrganizationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OrganizationList is a list of Organizations
type OrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Organization CRD objects
	Items []Organization `json:"items,omitempty"`
}
