/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SlackChannel struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SlackChannelSpec   `json:"spec,omitempty"`
	Status            SlackChannelStatus `json:"status,omitempty"`
}

type SlackChannelSpecDisplay struct {
	// Show the main body of the alert event.
	// +optional
	Message *bool `json:"message,omitempty" tf:"message"`
	// Show the list of @-handles in the alert event.
	// +optional
	Notified *bool `json:"notified,omitempty" tf:"notified"`
	// Show the alert event's snapshot image.
	// +optional
	Snapshot *bool `json:"snapshot,omitempty" tf:"snapshot"`
	// Show the scopes on which the monitor alerted.
	// +optional
	Tags *bool `json:"tags,omitempty" tf:"tags"`
}

type SlackChannelSpec struct {
	State *SlackChannelSpecResource `json:"state,omitempty" tf:"-"`

	Resource SlackChannelSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type SlackChannelSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Slack account name.
	AccountName *string `json:"accountName" tf:"account_name"`
	// Slack channel name.
	ChannelName *string `json:"channelName" tf:"channel_name"`
	// Configuration options for what is shown in an alert event message.
	Display *SlackChannelSpecDisplay `json:"display" tf:"display"`
}

type SlackChannelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SlackChannelList is a list of SlackChannels
type SlackChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SlackChannel CRD objects
	Items []SlackChannel `json:"items,omitempty"`
}
