/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepAssertionTargetjsonpath{}).Type1()):      SyntheticstestSpecApiStepAssertionTargetjsonpathCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepExtractedValueParser{}).Type1()):         SyntheticstestSpecApiStepExtractedValueParserCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestBasicauth{}).Type1()):             SyntheticstestSpecApiStepRequestBasicauthCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificate{}).Type1()):     SyntheticstestSpecApiStepRequestClientCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateCert{}).Type1()): SyntheticstestSpecApiStepRequestClientCertificateCertCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateKey{}).Type1()):  SyntheticstestSpecApiStepRequestClientCertificateKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestDefinition{}).Type1()):            SyntheticstestSpecApiStepRequestDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecAssertionTargetjsonpath{}).Type1()):             SyntheticstestSpecAssertionTargetjsonpathCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParams{}).Type1()):                   SyntheticstestSpecBrowserStepParamsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParamsVariable{}).Type1()):           SyntheticstestSpecBrowserStepParamsVariableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsList{}).Type1()):                         SyntheticstestSpecOptionsListCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListMonitorOptions{}).Type1()):           SyntheticstestSpecOptionsListMonitorOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListRetry{}).Type1()):                    SyntheticstestSpecOptionsListRetryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestBasicauth{}).Type1()):                    SyntheticstestSpecRequestBasicauthCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificate{}).Type1()):            SyntheticstestSpecRequestClientCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateCert{}).Type1()):        SyntheticstestSpecRequestClientCertificateCertCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateKey{}).Type1()):         SyntheticstestSpecRequestClientCertificateKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestDefinition{}).Type1()):                   SyntheticstestSpecRequestDefinitionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepAssertionTargetjsonpath{}).Type1()):      SyntheticstestSpecApiStepAssertionTargetjsonpathCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepExtractedValueParser{}).Type1()):         SyntheticstestSpecApiStepExtractedValueParserCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestBasicauth{}).Type1()):             SyntheticstestSpecApiStepRequestBasicauthCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificate{}).Type1()):     SyntheticstestSpecApiStepRequestClientCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateCert{}).Type1()): SyntheticstestSpecApiStepRequestClientCertificateCertCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateKey{}).Type1()):  SyntheticstestSpecApiStepRequestClientCertificateKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestDefinition{}).Type1()):            SyntheticstestSpecApiStepRequestDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecAssertionTargetjsonpath{}).Type1()):             SyntheticstestSpecAssertionTargetjsonpathCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParams{}).Type1()):                   SyntheticstestSpecBrowserStepParamsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParamsVariable{}).Type1()):           SyntheticstestSpecBrowserStepParamsVariableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsList{}).Type1()):                         SyntheticstestSpecOptionsListCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListMonitorOptions{}).Type1()):           SyntheticstestSpecOptionsListMonitorOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListRetry{}).Type1()):                    SyntheticstestSpecOptionsListRetryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestBasicauth{}).Type1()):                    SyntheticstestSpecRequestBasicauthCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificate{}).Type1()):            SyntheticstestSpecRequestClientCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateCert{}).Type1()):        SyntheticstestSpecRequestClientCertificateCertCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateKey{}).Type1()):         SyntheticstestSpecRequestClientCertificateKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestDefinition{}).Type1()):                   SyntheticstestSpecRequestDefinitionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepAssertionTargetjsonpathCodec struct {
}

func (SyntheticstestSpecApiStepAssertionTargetjsonpathCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) == nil
}

func (SyntheticstestSpecApiStepAssertionTargetjsonpathCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr)
	var objs []SyntheticstestSpecApiStepAssertionTargetjsonpath
	if obj != nil {
		objs = []SyntheticstestSpecApiStepAssertionTargetjsonpath{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepAssertionTargetjsonpath{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepAssertionTargetjsonpathCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = SyntheticstestSpecApiStepAssertionTargetjsonpath{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepAssertionTargetjsonpath

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepAssertionTargetjsonpath{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = SyntheticstestSpecApiStepAssertionTargetjsonpath{}
			}
		} else {
			*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = SyntheticstestSpecApiStepAssertionTargetjsonpath{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepAssertionTargetjsonpath

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepAssertionTargetjsonpath{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepAssertionTargetjsonpath)(ptr) = SyntheticstestSpecApiStepAssertionTargetjsonpath{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepAssertionTargetjsonpath", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepExtractedValueParserCodec struct {
}

func (SyntheticstestSpecApiStepExtractedValueParserCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepExtractedValueParser)(ptr) == nil
}

func (SyntheticstestSpecApiStepExtractedValueParserCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepExtractedValueParser)(ptr)
	var objs []SyntheticstestSpecApiStepExtractedValueParser
	if obj != nil {
		objs = []SyntheticstestSpecApiStepExtractedValueParser{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepExtractedValueParser{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepExtractedValueParserCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = SyntheticstestSpecApiStepExtractedValueParser{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepExtractedValueParser

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepExtractedValueParser{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = SyntheticstestSpecApiStepExtractedValueParser{}
			}
		} else {
			*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = SyntheticstestSpecApiStepExtractedValueParser{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepExtractedValueParser

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepExtractedValueParser{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepExtractedValueParser)(ptr) = SyntheticstestSpecApiStepExtractedValueParser{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepExtractedValueParser", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepRequestBasicauthCodec struct {
}

func (SyntheticstestSpecApiStepRequestBasicauthCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepRequestBasicauth)(ptr) == nil
}

func (SyntheticstestSpecApiStepRequestBasicauthCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepRequestBasicauth)(ptr)
	var objs []SyntheticstestSpecApiStepRequestBasicauth
	if obj != nil {
		objs = []SyntheticstestSpecApiStepRequestBasicauth{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestBasicauth{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepRequestBasicauthCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = SyntheticstestSpecApiStepRequestBasicauth{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepRequestBasicauth

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestBasicauth{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = SyntheticstestSpecApiStepRequestBasicauth{}
			}
		} else {
			*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = SyntheticstestSpecApiStepRequestBasicauth{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepRequestBasicauth

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestBasicauth{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepRequestBasicauth)(ptr) = SyntheticstestSpecApiStepRequestBasicauth{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepRequestBasicauth", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepRequestClientCertificateCodec struct {
}

func (SyntheticstestSpecApiStepRequestClientCertificateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) == nil
}

func (SyntheticstestSpecApiStepRequestClientCertificateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepRequestClientCertificate)(ptr)
	var objs []SyntheticstestSpecApiStepRequestClientCertificate
	if obj != nil {
		objs = []SyntheticstestSpecApiStepRequestClientCertificate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepRequestClientCertificateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = SyntheticstestSpecApiStepRequestClientCertificate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepRequestClientCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = SyntheticstestSpecApiStepRequestClientCertificate{}
			}
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = SyntheticstestSpecApiStepRequestClientCertificate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepRequestClientCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificate)(ptr) = SyntheticstestSpecApiStepRequestClientCertificate{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepRequestClientCertificate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepRequestClientCertificateCertCodec struct {
}

func (SyntheticstestSpecApiStepRequestClientCertificateCertCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) == nil
}

func (SyntheticstestSpecApiStepRequestClientCertificateCertCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr)
	var objs []SyntheticstestSpecApiStepRequestClientCertificateCert
	if obj != nil {
		objs = []SyntheticstestSpecApiStepRequestClientCertificateCert{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateCert{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepRequestClientCertificateCertCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateCert{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepRequestClientCertificateCert

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateCert{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateCert{}
			}
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateCert{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepRequestClientCertificateCert

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateCert{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificateCert)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateCert{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepRequestClientCertificateCert", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepRequestClientCertificateKeyCodec struct {
}

func (SyntheticstestSpecApiStepRequestClientCertificateKeyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) == nil
}

func (SyntheticstestSpecApiStepRequestClientCertificateKeyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr)
	var objs []SyntheticstestSpecApiStepRequestClientCertificateKey
	if obj != nil {
		objs = []SyntheticstestSpecApiStepRequestClientCertificateKey{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateKey{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepRequestClientCertificateKeyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateKey{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepRequestClientCertificateKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateKey{}
			}
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateKey{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepRequestClientCertificateKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestClientCertificateKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepRequestClientCertificateKey)(ptr) = SyntheticstestSpecApiStepRequestClientCertificateKey{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepRequestClientCertificateKey", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecApiStepRequestDefinitionCodec struct {
}

func (SyntheticstestSpecApiStepRequestDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecApiStepRequestDefinition)(ptr) == nil
}

func (SyntheticstestSpecApiStepRequestDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecApiStepRequestDefinition)(ptr)
	var objs []SyntheticstestSpecApiStepRequestDefinition
	if obj != nil {
		objs = []SyntheticstestSpecApiStepRequestDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecApiStepRequestDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = SyntheticstestSpecApiStepRequestDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecApiStepRequestDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = SyntheticstestSpecApiStepRequestDefinition{}
			}
		} else {
			*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = SyntheticstestSpecApiStepRequestDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecApiStepRequestDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecApiStepRequestDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = obj
		} else {
			*(*SyntheticstestSpecApiStepRequestDefinition)(ptr) = SyntheticstestSpecApiStepRequestDefinition{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecApiStepRequestDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecAssertionTargetjsonpathCodec struct {
}

func (SyntheticstestSpecAssertionTargetjsonpathCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecAssertionTargetjsonpath)(ptr) == nil
}

func (SyntheticstestSpecAssertionTargetjsonpathCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecAssertionTargetjsonpath)(ptr)
	var objs []SyntheticstestSpecAssertionTargetjsonpath
	if obj != nil {
		objs = []SyntheticstestSpecAssertionTargetjsonpath{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecAssertionTargetjsonpath{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecAssertionTargetjsonpathCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = SyntheticstestSpecAssertionTargetjsonpath{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecAssertionTargetjsonpath

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecAssertionTargetjsonpath{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = SyntheticstestSpecAssertionTargetjsonpath{}
			}
		} else {
			*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = SyntheticstestSpecAssertionTargetjsonpath{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecAssertionTargetjsonpath

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecAssertionTargetjsonpath{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = obj
		} else {
			*(*SyntheticstestSpecAssertionTargetjsonpath)(ptr) = SyntheticstestSpecAssertionTargetjsonpath{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecAssertionTargetjsonpath", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecBrowserStepParamsCodec struct {
}

func (SyntheticstestSpecBrowserStepParamsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecBrowserStepParams)(ptr) == nil
}

func (SyntheticstestSpecBrowserStepParamsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecBrowserStepParams)(ptr)
	var objs []SyntheticstestSpecBrowserStepParams
	if obj != nil {
		objs = []SyntheticstestSpecBrowserStepParams{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParams{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecBrowserStepParamsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecBrowserStepParams)(ptr) = SyntheticstestSpecBrowserStepParams{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecBrowserStepParams

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParams{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecBrowserStepParams)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecBrowserStepParams)(ptr) = SyntheticstestSpecBrowserStepParams{}
			}
		} else {
			*(*SyntheticstestSpecBrowserStepParams)(ptr) = SyntheticstestSpecBrowserStepParams{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecBrowserStepParams

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParams{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecBrowserStepParams)(ptr) = obj
		} else {
			*(*SyntheticstestSpecBrowserStepParams)(ptr) = SyntheticstestSpecBrowserStepParams{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecBrowserStepParams", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecBrowserStepParamsVariableCodec struct {
}

func (SyntheticstestSpecBrowserStepParamsVariableCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecBrowserStepParamsVariable)(ptr) == nil
}

func (SyntheticstestSpecBrowserStepParamsVariableCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecBrowserStepParamsVariable)(ptr)
	var objs []SyntheticstestSpecBrowserStepParamsVariable
	if obj != nil {
		objs = []SyntheticstestSpecBrowserStepParamsVariable{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParamsVariable{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecBrowserStepParamsVariableCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = SyntheticstestSpecBrowserStepParamsVariable{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecBrowserStepParamsVariable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParamsVariable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = SyntheticstestSpecBrowserStepParamsVariable{}
			}
		} else {
			*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = SyntheticstestSpecBrowserStepParamsVariable{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecBrowserStepParamsVariable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecBrowserStepParamsVariable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = obj
		} else {
			*(*SyntheticstestSpecBrowserStepParamsVariable)(ptr) = SyntheticstestSpecBrowserStepParamsVariable{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecBrowserStepParamsVariable", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecOptionsListCodec struct {
}

func (SyntheticstestSpecOptionsListCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecOptionsList)(ptr) == nil
}

func (SyntheticstestSpecOptionsListCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecOptionsList)(ptr)
	var objs []SyntheticstestSpecOptionsList
	if obj != nil {
		objs = []SyntheticstestSpecOptionsList{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsList{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecOptionsListCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecOptionsList)(ptr) = SyntheticstestSpecOptionsList{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecOptionsList

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsList{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecOptionsList)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecOptionsList)(ptr) = SyntheticstestSpecOptionsList{}
			}
		} else {
			*(*SyntheticstestSpecOptionsList)(ptr) = SyntheticstestSpecOptionsList{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecOptionsList

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsList{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecOptionsList)(ptr) = obj
		} else {
			*(*SyntheticstestSpecOptionsList)(ptr) = SyntheticstestSpecOptionsList{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecOptionsList", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecOptionsListMonitorOptionsCodec struct {
}

func (SyntheticstestSpecOptionsListMonitorOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecOptionsListMonitorOptions)(ptr) == nil
}

func (SyntheticstestSpecOptionsListMonitorOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecOptionsListMonitorOptions)(ptr)
	var objs []SyntheticstestSpecOptionsListMonitorOptions
	if obj != nil {
		objs = []SyntheticstestSpecOptionsListMonitorOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListMonitorOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecOptionsListMonitorOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = SyntheticstestSpecOptionsListMonitorOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecOptionsListMonitorOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListMonitorOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = SyntheticstestSpecOptionsListMonitorOptions{}
			}
		} else {
			*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = SyntheticstestSpecOptionsListMonitorOptions{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecOptionsListMonitorOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListMonitorOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = obj
		} else {
			*(*SyntheticstestSpecOptionsListMonitorOptions)(ptr) = SyntheticstestSpecOptionsListMonitorOptions{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecOptionsListMonitorOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecOptionsListRetryCodec struct {
}

func (SyntheticstestSpecOptionsListRetryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecOptionsListRetry)(ptr) == nil
}

func (SyntheticstestSpecOptionsListRetryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecOptionsListRetry)(ptr)
	var objs []SyntheticstestSpecOptionsListRetry
	if obj != nil {
		objs = []SyntheticstestSpecOptionsListRetry{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListRetry{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecOptionsListRetryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecOptionsListRetry)(ptr) = SyntheticstestSpecOptionsListRetry{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecOptionsListRetry

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListRetry{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecOptionsListRetry)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecOptionsListRetry)(ptr) = SyntheticstestSpecOptionsListRetry{}
			}
		} else {
			*(*SyntheticstestSpecOptionsListRetry)(ptr) = SyntheticstestSpecOptionsListRetry{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecOptionsListRetry

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecOptionsListRetry{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecOptionsListRetry)(ptr) = obj
		} else {
			*(*SyntheticstestSpecOptionsListRetry)(ptr) = SyntheticstestSpecOptionsListRetry{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecOptionsListRetry", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecRequestBasicauthCodec struct {
}

func (SyntheticstestSpecRequestBasicauthCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecRequestBasicauth)(ptr) == nil
}

func (SyntheticstestSpecRequestBasicauthCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecRequestBasicauth)(ptr)
	var objs []SyntheticstestSpecRequestBasicauth
	if obj != nil {
		objs = []SyntheticstestSpecRequestBasicauth{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestBasicauth{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecRequestBasicauthCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecRequestBasicauth)(ptr) = SyntheticstestSpecRequestBasicauth{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecRequestBasicauth

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestBasicauth{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecRequestBasicauth)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecRequestBasicauth)(ptr) = SyntheticstestSpecRequestBasicauth{}
			}
		} else {
			*(*SyntheticstestSpecRequestBasicauth)(ptr) = SyntheticstestSpecRequestBasicauth{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecRequestBasicauth

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestBasicauth{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecRequestBasicauth)(ptr) = obj
		} else {
			*(*SyntheticstestSpecRequestBasicauth)(ptr) = SyntheticstestSpecRequestBasicauth{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecRequestBasicauth", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecRequestClientCertificateCodec struct {
}

func (SyntheticstestSpecRequestClientCertificateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecRequestClientCertificate)(ptr) == nil
}

func (SyntheticstestSpecRequestClientCertificateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecRequestClientCertificate)(ptr)
	var objs []SyntheticstestSpecRequestClientCertificate
	if obj != nil {
		objs = []SyntheticstestSpecRequestClientCertificate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecRequestClientCertificateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecRequestClientCertificate)(ptr) = SyntheticstestSpecRequestClientCertificate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecRequestClientCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecRequestClientCertificate)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecRequestClientCertificate)(ptr) = SyntheticstestSpecRequestClientCertificate{}
			}
		} else {
			*(*SyntheticstestSpecRequestClientCertificate)(ptr) = SyntheticstestSpecRequestClientCertificate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecRequestClientCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecRequestClientCertificate)(ptr) = obj
		} else {
			*(*SyntheticstestSpecRequestClientCertificate)(ptr) = SyntheticstestSpecRequestClientCertificate{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecRequestClientCertificate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecRequestClientCertificateCertCodec struct {
}

func (SyntheticstestSpecRequestClientCertificateCertCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecRequestClientCertificateCert)(ptr) == nil
}

func (SyntheticstestSpecRequestClientCertificateCertCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecRequestClientCertificateCert)(ptr)
	var objs []SyntheticstestSpecRequestClientCertificateCert
	if obj != nil {
		objs = []SyntheticstestSpecRequestClientCertificateCert{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateCert{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecRequestClientCertificateCertCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = SyntheticstestSpecRequestClientCertificateCert{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecRequestClientCertificateCert

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateCert{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = SyntheticstestSpecRequestClientCertificateCert{}
			}
		} else {
			*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = SyntheticstestSpecRequestClientCertificateCert{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecRequestClientCertificateCert

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateCert{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = obj
		} else {
			*(*SyntheticstestSpecRequestClientCertificateCert)(ptr) = SyntheticstestSpecRequestClientCertificateCert{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecRequestClientCertificateCert", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecRequestClientCertificateKeyCodec struct {
}

func (SyntheticstestSpecRequestClientCertificateKeyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecRequestClientCertificateKey)(ptr) == nil
}

func (SyntheticstestSpecRequestClientCertificateKeyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecRequestClientCertificateKey)(ptr)
	var objs []SyntheticstestSpecRequestClientCertificateKey
	if obj != nil {
		objs = []SyntheticstestSpecRequestClientCertificateKey{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateKey{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecRequestClientCertificateKeyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = SyntheticstestSpecRequestClientCertificateKey{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecRequestClientCertificateKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = SyntheticstestSpecRequestClientCertificateKey{}
			}
		} else {
			*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = SyntheticstestSpecRequestClientCertificateKey{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecRequestClientCertificateKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestClientCertificateKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = obj
		} else {
			*(*SyntheticstestSpecRequestClientCertificateKey)(ptr) = SyntheticstestSpecRequestClientCertificateKey{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecRequestClientCertificateKey", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticstestSpecRequestDefinitionCodec struct {
}

func (SyntheticstestSpecRequestDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticstestSpecRequestDefinition)(ptr) == nil
}

func (SyntheticstestSpecRequestDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticstestSpecRequestDefinition)(ptr)
	var objs []SyntheticstestSpecRequestDefinition
	if obj != nil {
		objs = []SyntheticstestSpecRequestDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticstestSpecRequestDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticstestSpecRequestDefinition)(ptr) = SyntheticstestSpecRequestDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticstestSpecRequestDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticstestSpecRequestDefinition)(ptr) = objs[0]
			} else {
				*(*SyntheticstestSpecRequestDefinition)(ptr) = SyntheticstestSpecRequestDefinition{}
			}
		} else {
			*(*SyntheticstestSpecRequestDefinition)(ptr) = SyntheticstestSpecRequestDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticstestSpecRequestDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticstestSpecRequestDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticstestSpecRequestDefinition)(ptr) = obj
		} else {
			*(*SyntheticstestSpecRequestDefinition)(ptr) = SyntheticstestSpecRequestDefinition{}
		}
	default:
		iter.ReportError("decode SyntheticstestSpecRequestDefinition", "unexpected JSON type")
	}
}
