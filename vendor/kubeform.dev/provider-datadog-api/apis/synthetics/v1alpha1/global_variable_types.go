/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GlobalVariable struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalVariableSpec   `json:"spec,omitempty"`
	Status            GlobalVariableStatus `json:"status,omitempty"`
}

type GlobalVariableSpecParseTestOptionsParser struct {
	// Type of parser to extract the value.
	Type *string `json:"type" tf:"type"`
	// Value for the parser to use, required for type `json_path` or `regex`.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type GlobalVariableSpecParseTestOptions struct {
	// Required when type = `http_header`. Defines the header to use to extract the value
	// +optional
	Field  *string                                   `json:"field,omitempty" tf:"field"`
	Parser *GlobalVariableSpecParseTestOptionsParser `json:"parser" tf:"parser"`
	// Defines the source to use to extract the value.
	Type *string `json:"type" tf:"type"`
}

type GlobalVariableSpec struct {
	State *GlobalVariableSpecResource `json:"state,omitempty" tf:"-"`

	Resource GlobalVariableSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type GlobalVariableSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Description of the global variable.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Synthetics global variable name.
	Name *string `json:"name" tf:"name"`
	// Id of the Synthetics test to use for a variable from test.
	// +optional
	ParseTestID *string `json:"parseTestID,omitempty" tf:"parse_test_id"`
	// ID of the Synthetics test to use a source of the global variable value.
	// +optional
	ParseTestOptions *GlobalVariableSpecParseTestOptions `json:"parseTestOptions,omitempty" tf:"parse_test_options"`
	// A list of role identifiers to associate with the Synthetics global variable.
	// +optional
	RestrictedRoles []string `json:"restrictedRoles,omitempty" tf:"restricted_roles"`
	// If set to true, the value of the global variable is hidden. Defaults to `false`.
	// +optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`
	// A list of tags to associate with your synthetics global variable.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The value of the global variable.
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type GlobalVariableStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GlobalVariableList is a list of GlobalVariables
type GlobalVariableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GlobalVariable CRD objects
	Items []GlobalVariable `json:"items,omitempty"`
}
